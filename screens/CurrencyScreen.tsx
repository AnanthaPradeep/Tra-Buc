import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  FlatList,
  Alert,
  ActivityIndicator,
} from 'react-native';
import RNPickerSelect from 'react-native-picker-select';

const API_URL = 'https://open.er-api.com/v6/latest'; // Replace with your free currency API endpoint
const API_KEY = 'c31086b86430261c03e08c8d'; // Replace this with your actual API key

// Map of currency codes to country flag emojis
const currencyFlags: { [key: string]: string } = {
    USD: "ðŸ‡ºðŸ‡¸", EUR: "ðŸ‡ªðŸ‡º", GBP: "ðŸ‡¬ðŸ‡§", INR: "ðŸ‡®ðŸ‡³", AUD: "ðŸ‡¦ðŸ‡º", CAD: "ðŸ‡¨ðŸ‡¦", AFN: "ðŸ‡¦ðŸ‡«", 
    ALL: "ðŸ‡¦ðŸ‡±", DZD: "ðŸ‡©ðŸ‡¿", AOA: "ðŸ‡¦ðŸ‡´", 
    ARS: "ðŸ‡¦ðŸ‡·", AMD: "ðŸ‡¦ðŸ‡²", AWG: "ðŸ‡¦ðŸ‡¼", 
    AZN: "ðŸ‡¦ðŸ‡¿", BAM: "ðŸ‡§ðŸ‡¦", BBD: "ðŸ‡§ðŸ‡§", 
    BDT: "ðŸ‡§ðŸ‡©", BYN: "ðŸ‡§ðŸ‡¾", BZD: "ðŸ‡§ðŸ‡¿", 
    BTN: "ðŸ‡§ðŸ‡¹", BOV: "ðŸ‡§ðŸ‡´", BRL: "ðŸ‡§ðŸ‡·", 
    BND: "ðŸ‡§ðŸ‡³", BWP: "ðŸ‡§ðŸ‡¼", BYR: "ðŸ‡§ðŸ‡¾", 
    BHD: "ðŸ‡§ðŸ‡­", BIF: "ðŸ‡§ðŸ‡®", KMF: "ðŸ‡°ðŸ‡²", 
    COD: "ðŸ‡¨ðŸ‡©", COU: "ðŸ‡¨ðŸ‡´", CRC: "ðŸ‡¨ðŸ‡·", 
    HRK: "ðŸ‡­ðŸ‡·", CUP: "ðŸ‡¨ðŸ‡º", CYP: "ðŸ‡¨ðŸ‡¾", 
    CZK: "ðŸ‡¨ðŸ‡¿", DJF: "ðŸ‡©ðŸ‡¯", DKK: "ðŸ‡©ðŸ‡°", 
    DMA: "ðŸ‡©ðŸ‡²", DOP: "ðŸ‡©ðŸ‡´", EGP: "ðŸ‡ªðŸ‡¬", 
    ERN: "ðŸ‡ªðŸ‡·", EEK: "ðŸ‡ªðŸ‡ª", ETB: "ðŸ‡ªðŸ‡¹", 
    FJD: "ðŸ‡«ðŸ‡¯", FKP: "ðŸ‡«ðŸ‡°", FOK: "ðŸ‡«ðŸ‡´", 
    GEL: "ðŸ‡¬ðŸ‡ª", GHS: "ðŸ‡¬ðŸ‡­", GIP: "ðŸ‡¬ðŸ‡®", 
    GMD: "ðŸ‡¬ðŸ‡²", GNF: "ðŸ‡¬ðŸ‡³", GTQ: "ðŸ‡¬ðŸ‡¹", 
    GYD: "ðŸ‡¬ðŸ‡¾", HKD: "ðŸ‡­ðŸ‡°", HNL: "ðŸ‡­ðŸ‡³", HTG: "ðŸ‡­ðŸ‡¹", HUF: "ðŸ‡­ðŸ‡º", 
    IDR: "ðŸ‡®ðŸ‡©", ILS: "ðŸ‡®ðŸ‡±",  IQD: "ðŸ‡®ðŸ‡¶", IRR: "ðŸ‡®ðŸ‡·", ISK: "ðŸ‡®ðŸ‡¸", 
    JMD: "ðŸ‡¯ðŸ‡²", JOD: "ðŸ‡¯ðŸ‡´", JPY: "ðŸ‡¯ðŸ‡µ", 
    KES: "ðŸ‡°ðŸ‡ª", KGS: "ðŸ‡°ðŸ‡¬", KHR: "ðŸ‡°ðŸ‡­", KPW: "ðŸ‡°ðŸ‡µ", KRW: "ðŸ‡°ðŸ‡·", 
    KWD: "ðŸ‡°ðŸ‡¼", KYD: "ðŸ‡°ðŸ‡¾", KZT: "ðŸ‡°ðŸ‡¿", 
    LAK: "ðŸ‡±ðŸ‡¦", LBP: "ðŸ‡±ðŸ‡§", LKR: "ðŸ‡±ðŸ‡°", LRD: "ðŸ‡±ðŸ‡·", LSL: "ðŸ‡±ðŸ‡¸", LTL: "ðŸ‡±ðŸ‡¹", 
    LVL: "ðŸ‡±ðŸ‡»", LYD: "ðŸ‡±ðŸ‡¾", MAD: "ðŸ‡²ðŸ‡¦", MDL: "ðŸ‡²ðŸ‡©", MGA: "ðŸ‡²ðŸ‡¬", MKD: "ðŸ‡²ðŸ‡°", 
    MMK: "ðŸ‡²ðŸ‡²", MNT: "ðŸ‡²ðŸ‡³", MOP: "ðŸ‡²ðŸ‡´", MUR: "ðŸ‡²ðŸ‡º", MWK: "ðŸ‡²ðŸ‡¼", MXN: "ðŸ‡²ðŸ‡½", 
    MYR: "ðŸ‡²ðŸ‡¾", MZN: "ðŸ‡²ðŸ‡¿", NAD: "ðŸ‡³ðŸ‡¦", NGN: "ðŸ‡³ðŸ‡¬", NIO: "ðŸ‡³ðŸ‡®", NOK: "ðŸ‡³ðŸ‡´", 
    NPR: "ðŸ‡³ðŸ‡µ", NZD: "ðŸ‡³ðŸ‡¿", OMR: "ðŸ‡´ðŸ‡²", PAB: "ðŸ‡µðŸ‡¦", PEN: "ðŸ‡µðŸ‡ª", PGK: "ðŸ‡µðŸ‡¬", 
    PHP: "ðŸ‡µðŸ‡­", PKR: "ðŸ‡µðŸ‡°", PLN: "ðŸ‡µðŸ‡±", PRB: "ðŸ‡µðŸ‡·", PYG: "ðŸ‡µðŸ‡¾", QAR: "ðŸ‡¶ðŸ‡¦", 
    RON: "ðŸ‡·ðŸ‡´", RSD: "ðŸ‡·ðŸ‡¸", RUB: "ðŸ‡·ðŸ‡º", RWF: "ðŸ‡·ðŸ‡¼", SAR: "ðŸ‡¸ðŸ‡¦", SBD: "ðŸ‡¸ðŸ‡§",
    SCR: "ðŸ‡¸ðŸ‡¨", SDG: "ðŸ‡¸ðŸ‡©", SEK: "ðŸ‡¸ðŸ‡ª", SGD: "ðŸ‡¸ðŸ‡¬", SHR: "ðŸ‡¸ðŸ‡­", SLL: "ðŸ‡¸ðŸ‡±", 
    SOS: "ðŸ‡¸ðŸ‡´", SRD: "ðŸ‡¸ðŸ‡·", SSP: "ðŸ‡¸ðŸ‡¸", STN: "ðŸ‡¸ðŸ‡¹", SYP: "ðŸ‡¸ðŸ‡¾", SZL: "ðŸ‡¸ðŸ‡¿", 
    THB: "ðŸ‡¹ðŸ‡­", TJS: "ðŸ‡¹ðŸ‡¯", TMT: "ðŸ‡¹ðŸ‡²", TND: "ðŸ‡¹ðŸ‡³", TOP: "ðŸ‡¹ðŸ‡´", TRY: "ðŸ‡¹ðŸ‡·", 
    TTD: "ðŸ‡¹ðŸ‡¹", TWD: "ðŸ‡¹ðŸ‡¼", TZS: "ðŸ‡¹ðŸ‡¿", UAH: "ðŸ‡ºðŸ‡¦", UGX: "ðŸ‡ºðŸ‡¬", UYU: "ðŸ‡ºðŸ‡¾", 
    UZS: "ðŸ‡ºðŸ‡¿", VEF: "ðŸ‡»ðŸ‡ª", VND: "ðŸ‡»ðŸ‡³", VUV: "ðŸ‡»ðŸ‡º", WST: "ðŸ‡¼ðŸ‡¸", XOF: "ðŸ‡¨ðŸ‡©", 
    YER: "ðŸ‡¾ðŸ‡ª", ZAR: "ðŸ‡¿ðŸ‡¦", ZMW: "ðŸ‡¿ðŸ‡²", ZWL: "ðŸ‡¿ðŸ‡¼"

  // Add more currencies and flags as needed
};

const CurrencyScreen = () => {
  const [baseCurrency, setBaseCurrency] = useState<string>('USD');
  const [targetCurrency, setTargetCurrency] = useState<string>('EUR');
  const [amount, setAmount] = useState<string>('1');
  const [exchangeRate, setExchangeRate] = useState<number | null>(null);
  const [availableCurrencies, setAvailableCurrencies] = useState<string[]>([]);
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    fetchAvailableCurrencies();
  }, []);

  const fetchAvailableCurrencies = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_URL}?apikey=${API_KEY}`);
      const data = await response.json();

      if (data && data.rates) {
        setAvailableCurrencies(Object.keys(data.rates));
      } else {
        Alert.alert('Error', 'Unable to fetch available currencies.');
      }
    } catch (error) {
      Alert.alert('Error', 'Something went wrong while fetching data.');
    } finally {
      setLoading(false);
    }
  };

  const handleConversion = async () => {
    try {
      if (!amount || isNaN(Number(amount))) {
        Alert.alert('Invalid Input', 'Please enter a valid amount.');
        return;
      }

      setLoading(true);
      const response = await fetch(`${API_URL}?apikey=${API_KEY}`);
      const data = await response.json();

      if (data && data.rates && data.rates[targetCurrency]) {
        const rate = data.rates[targetCurrency];
        setExchangeRate(rate);
      } else {
        Alert.alert('Error', 'Unable to fetch exchange rate.');
      }
    } catch (error) {
      Alert.alert('Error', 'Something went wrong during conversion.');
    } finally {
      setLoading(false);
    }
  };

  const convertedAmount = exchangeRate ? (Number(amount) * exchangeRate).toFixed(2) : '';

  // Add flag emojis to dropdown options
  const currencyOptions = availableCurrencies.map((currency) => ({
    label: `${currencyFlags[currency] || ''} ${currency}`,
    value: currency,
  }));

  return (
    <View style={styles.container}>
      <Text style={styles.header}>Currency Exchange</Text>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Base Currency</Text>
        <RNPickerSelect
          onValueChange={(value) => setBaseCurrency(value)}
          items={currencyOptions}
          value={baseCurrency}
          placeholder={{ label: 'Select Base Currency', value: null }}
          style={pickerSelectStyles}
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Target Currency</Text>
        <RNPickerSelect
          onValueChange={(value) => setTargetCurrency(value)}
          items={currencyOptions}
          value={targetCurrency}
          placeholder={{ label: 'Select Target Currency', value: null }}
          style={pickerSelectStyles}
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>Amount</Text>
        <TextInput
          style={styles.input}
          value={amount}
          onChangeText={setAmount}
          keyboardType="numeric"
          placeholder="Enter amount to convert"
        />
      </View>

      <TouchableOpacity style={styles.button} onPress={handleConversion}>
        <Text style={styles.buttonText}>Convert</Text>
      </TouchableOpacity>

      {loading && <ActivityIndicator size="large" color="#333" style={{ margin: 20 }} />}

      {exchangeRate !== null && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>
            {amount} {baseCurrency} = {convertedAmount} {targetCurrency}
          </Text>
        </View>
      )}

      <Text style={styles.subHeader}>Available Currencies</Text>
      <FlatList
        data={availableCurrencies}
        keyExtractor={(item) => item}
        renderItem={({ item }) => (
          <Text style={styles.currencyItem}>
            {currencyFlags[item] || ''} {item}
          </Text>
        )}
        style={styles.currencyList}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: '#fff' },
  header: { fontSize: 24, fontWeight: 'bold', marginBottom: 20, textAlign: 'center' },
  subHeader: { fontSize: 18, fontWeight: 'bold', marginTop: 20 },
  inputGroup: { marginBottom: 15 },
  label: { fontSize: 16, marginBottom: 5 },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    padding: 10,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#4CAF50',
    padding: 15,
    borderRadius: 5,
    alignItems: 'center',
    marginVertical: 10,
  },
  buttonText: { color: '#fff', fontSize: 16, fontWeight: 'bold' },
  resultContainer: {
    backgroundColor: '#f9f9f9',
    padding: 15,
    borderRadius: 5,
    marginTop: 10,
  },
  resultText: { fontSize: 18, fontWeight: 'bold', textAlign: 'center' },
  currencyList: { marginTop: 10 },
  currencyItem: {
    fontSize: 16,
    padding: 5,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
});

const pickerSelectStyles = StyleSheet.create({
  inputIOS: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 10,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    color: 'black',
    paddingRight: 30,
  },
  inputAndroid: {
    fontSize: 16,
    paddingHorizontal: 10,
    paddingVertical: 8,
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 5,
    color: 'black',
    paddingRight: 30,
  },
});

export default CurrencyScreen;
